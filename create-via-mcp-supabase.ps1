# Script utilisant MCP Supabase pour cr√©er un assistant
# Create via MCP Supabase.ps1

Write-Host "üöÄ Cr√©ation Assistant via MCP Supabase" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor Yellow

# Configuration automatique via MCP
$SUPABASE_PROJECT_ID = "aiurboizarbbcpynmmgv"
$SUPABASE_URL = "https://aiurboizarbbcpynmmgv.supabase.co"
$SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFpdXJib2l6YXJiYmNweW5tbWd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTU4NTk3NzYsImV4cCI6MjAzMTQzNTc3Nn0.JH0x8O1KnfDl5lsZFSBJ0TlkA3pFQ8aNSDT8VOMBh1o"

Write-Host "‚úÖ Configuration Supabase automatique" -ForegroundColor Green
Write-Host "   Projet : KOLI ($SUPABASE_PROJECT_ID)" -ForegroundColor White
Write-Host "   URL : $SUPABASE_URL" -ForegroundColor White
Write-Host "   Region : eu-central-2" -ForegroundColor White

$headers = @{
    "Authorization" = "Bearer $SUPABASE_ANON_KEY"
    "Content-Type" = "application/json"
}

# Test de connexion aux edge functions
Write-Host "`nüîç V√©rification des Edge Functions..." -ForegroundColor Yellow

# Test de la fonction analyze-business
Write-Host "`nüìä Test 1: Analyze Business Function" -ForegroundColor Cyan

$businessDescription = "Restaurant italien La Bella Vista √† Paris, sp√©cialis√© en pizza et p√¢tes fra√Æches, ambiance familiale"

try {
    $analyzePayload = @{ description = $businessDescription } | ConvertTo-Json
    $analyzeUrl = "$SUPABASE_URL/functions/v1/configurator-tools/analyze-business"
    
    Write-Host "   Appel : $analyzeUrl" -ForegroundColor Gray
    $analyzeResponse = Invoke-RestMethod -Uri $analyzeUrl -Method POST -Headers $headers -Body $analyzePayload
    
    $sector = $analyzeResponse.analysis.sector
    $template = $analyzeResponse.analysis.recommendedTemplate
    $confidence = $analyzeResponse.analysis.confidence
    
    Write-Host "‚úÖ Secteur d√©tect√© : $sector (confiance: $confidence)" -ForegroundColor Green
    Write-Host "   Template : $($template.name)" -ForegroundColor White
    Write-Host "   Confiance : $($template.id)" -ForegroundColor White
    
} catch {
    Write-Host "‚ùå Erreur analyze-business : $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Status Code : $($_.Exception.Response.StatusCode)" -ForegroundColor Red
    exit 1
}

# Test de la fonction list-voices
Write-Host "`nüéµ Test 2: List Voices Function" -ForegroundColor Cyan

try {
    $voicesPayload = @{ 
        sector = $sector
        businessName = "La Bella Vista"
        language = "fr"
    } | ConvertTo-Json
    
    $voicesUrl = "$SUPABASE_URL/functions/v1/configurator-tools/list-voices"
    Write-Host "   Appel : $voicesUrl" -ForegroundColor Gray
    $voicesResponse = Invoke-RestMethod -Uri $voicesUrl -Method POST -Headers $headers -Body $voicesPayload
    
    $primaryVoice = $voicesResponse.recommendations.primary
    $alternatives = $voicesResponse.recommendations.alternatives
    
    Write-Host "‚úÖ Voix recommand√©e : $($primaryVoice.name)" -ForegroundColor Green
    Write-Host "   Provider : $($primaryVoice.provider)" -ForegroundColor White
    Write-Host "   Style : $($primaryVoice.style)" -ForegroundColor White
    Write-Host "   Alternatives : $($alternatives.Count)" -ForegroundColor White
    
} catch {
    Write-Host "‚ùå Erreur list-voices : $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Status Code : $($_.Exception.Response.StatusCode)" -ForegroundColor Red
    exit 1
}

# Test de la fonction create-assistant
Write-Host "`nüöÄ Test 3: Create Assistant Function" -ForegroundColor Cyan

try {
    $assistantPayload = @{
        businessName = "La Bella Vista"
        sector = $sector
        selectedVoice = @{
            provider = $primaryVoice.provider
            voiceId = $primaryVoice.voiceId
            name = $primaryVoice.name
        }
        template = $template
        userId = "test-mcp-user"
    } | ConvertTo-Json -Depth 10
    
    $createUrl = "$SUPABASE_URL/functions/v1/configurator-tools/create-assistant"
    Write-Host "   Appel : $createUrl" -ForegroundColor Gray
    $assistantResponse = Invoke-RestMethod -Uri $createUrl -Method POST -Headers $headers -Body $assistantPayload
    
    $assistantId = $assistantResponse.assistant_id
    $testUrl = $assistantResponse.test_url
    $supabaseId = $assistantResponse.supabase_id
    
    Write-Host "‚úÖ Assistant cr√©√© avec succ√®s !" -ForegroundColor Green
    Write-Host "   Vapi ID : $assistantId" -ForegroundColor Cyan
    Write-Host "   Supabase ID : $supabaseId" -ForegroundColor Cyan
    Write-Host "   Test URL : $testUrl" -ForegroundColor Cyan
    
} catch {
    Write-Host "‚ùå Erreur create-assistant : $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Status Code : $($_.Exception.Response.StatusCode)" -ForegroundColor Red
    
    # Afficher plus de d√©tails
    if ($_.ErrorDetails) {
        Write-Host "   D√©tails : $($_.ErrorDetails.Message)" -ForegroundColor Red
    }
    exit 1
}

# R√©sum√© de succ√®s
Write-Host "`nüéâ SUCC√àS COMPLET ! Assistant Cr√©√© via MCP" -ForegroundColor Green
Write-Host "===========================================" -ForegroundColor Yellow
Write-Host "‚úÖ Edge Functions Supabase op√©rationnelles" -ForegroundColor White
Write-Host "‚úÖ Secteur analys√© : $sector" -ForegroundColor White
Write-Host "‚úÖ Voix s√©lectionn√©e : $($primaryVoice.name)" -ForegroundColor White
Write-Host "‚úÖ Assistant Vapi d√©ploy√© : $assistantId" -ForegroundColor White
Write-Host "‚úÖ Donn√©es en Supabase : $supabaseId" -ForegroundColor White

Write-Host "`nüîó Test Direct de l'Assistant :" -ForegroundColor Cyan
Write-Host "$testUrl" -ForegroundColor Blue

Write-Host "`nüìã Configuration Final Assistant Configurateur :" -ForegroundColor Yellow
Write-Host "1. ü§ñ Assistant ID : $assistantId" -ForegroundColor White
Write-Host "2. üéØ Secteur optimis√© : $sector" -ForegroundColor White
Write-Host "3. üéµ Voix configur√©e : $($primaryVoice.provider)/$($primaryVoice.voiceId)" -ForegroundColor White
Write-Host "4. üöÄ Pr√™t pour int√©gration frontend" -ForegroundColor White

Write-Host "`n‚ú® Les 3 Tools Configurateur sont maintenant test√©s et op√©rationnels !" -ForegroundColor Magenta

Write-Host "üöÄ Test des Edge Functions via MCP Supabase" -ForegroundColor Cyan

# Configuration automatique du projet KOLI
$SUPABASE_PROJECT_ID = "aiurboizarbbcpynmmgv"
$SUPABASE_URL = "https://aiurboizarbbcpynmmgv.supabase.co"
$SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFpdXJib2l6YXJiYmNweW5tbWd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTU4NTk3NzYsImV4cCI6MjAzMTQzNTc3Nn0.JH0x8O1KnfDl5lsZFSBJ0TlkA3pFQ8aNSDT8VOMBh1o"

Write-Host "‚úÖ Projet KOLI configur√© automatiquement" -ForegroundColor Green

$headers = @{
    "Authorization" = "Bearer $SUPABASE_ANON_KEY"
    "Content-Type" = "application/json"
}

# Test des 3 edge functions configurateur
Write-Host "`nüìä Test analyze-business..." -ForegroundColor Yellow

try {
    $analyzePayload = @{ description = "Restaurant italien √† Paris" } | ConvertTo-Json
    $analyzeResponse = Invoke-RestMethod -Uri "$SUPABASE_URL/functions/v1/configurator-tools/analyze-business" -Method POST -Headers $headers -Body $analyzePayload
    
    Write-Host "‚úÖ Secteur d√©tect√© : $($analyzeResponse.analysis.sector)" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Erreur : $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nScript termin√©" -ForegroundColor White 