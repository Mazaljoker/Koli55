# Script de test et d√©ploiement OpenAPI AlloKoli
# Teste la sp√©cification et propose des actions de d√©ploiement

Write-Host "üöÄ Test et D√©ploiement OpenAPI AlloKoli v2.0.0" -ForegroundColor Cyan
Write-Host "===================================================" -ForegroundColor Cyan

# Configuration
$specFile = "specs/allokoli-api-complete-final.yaml"
$fullSpecFile = "specs/allokoli-api-complete.yaml"

# V√©rifier les pr√©requis
Write-Host "`nüîç V√©rification des pr√©requis..." -ForegroundColor Yellow

if (-not (Test-Path $specFile)) {
    Write-Host "‚ùå Fichier sp√©cification introuvable: $specFile" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Sp√©cification trouv√©e: $specFile" -ForegroundColor Green

# Afficher les informations de base
$fileInfo = Get-Item $specFile
Write-Host "üìä Informations fichier:" -ForegroundColor Yellow
Write-Host "  - Taille: $([math]::Round($fileInfo.Length / 1KB, 2)) KB" -ForegroundColor White
Write-Host "  - Lignes: $((Get-Content $specFile).Count)" -ForegroundColor White
Write-Host "  - Modifi√©: $($fileInfo.LastWriteTime)" -ForegroundColor White

# Menu des actions disponibles
Write-Host "`nüéØ Actions disponibles:" -ForegroundColor Cyan
Write-Host "1. üìñ Ouvrir dans Swagger Editor (navigateur)" -ForegroundColor Green
Write-Host "2. üîß G√©n√©rer client TypeScript" -ForegroundColor Green
Write-Host "3. üêç G√©n√©rer client Python" -ForegroundColor Green
Write-Host "4. ‚úÖ Valider sp√©cification avec outils en ligne" -ForegroundColor Green
Write-Host "5. üìã Copier URL pour int√©gration" -ForegroundColor Green
Write-Host "6. üåê Tester endpoint /test (connectivit√©)" -ForegroundColor Green
Write-Host "7. üìÑ Afficher r√©sum√© complet" -ForegroundColor Green
Write-Host "0. ‚ùå Quitter" -ForegroundColor Red

# Lire le choix utilisateur
Write-Host "`nChoisissez une action (0-7): " -NoNewline -ForegroundColor White
$choice = Read-Host

switch ($choice) {
    "1" {
        Write-Host "`nüìñ Ouverture de Swagger Editor..." -ForegroundColor Cyan
        Write-Host "1. Allez sur: https://editor.swagger.io/" -ForegroundColor Yellow
        Write-Host "2. Copiez le contenu de: $specFile" -ForegroundColor Yellow
        Write-Host "3. Collez dans l'√©diteur pour voir la documentation interactive" -ForegroundColor Yellow
        
        # Tenter d'ouvrir le navigateur
        try {
            Start-Process "https://editor.swagger.io/"
            Write-Host "‚úÖ Navigateur ouvert sur Swagger Editor" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Ouvrez manuellement: https://editor.swagger.io/" -ForegroundColor Yellow
        }
    }
    
    "2" {
        Write-Host "`nüîß G√©n√©ration du client TypeScript..." -ForegroundColor Cyan
        Write-Host "Commande √† ex√©cuter:" -ForegroundColor Yellow
        Write-Host "npx @openapitools/openapi-generator-cli generate -i $specFile -g typescript-fetch -o ./generated/typescript" -ForegroundColor White
        
        $confirm = Read-Host "Ex√©cuter maintenant? (y/N)"
        if ($confirm -eq 'y' -or $confirm -eq 'Y') {
            try {
                npx @openapitools/openapi-generator-cli generate -i $specFile -g typescript-fetch -o ./generated/typescript
                Write-Host "‚úÖ Client TypeScript g√©n√©r√© dans ./generated/typescript" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå Erreur: Assurez-vous que Node.js et npm sont install√©s" -ForegroundColor Red
            }
        }
    }
    
    "3" {
        Write-Host "`nüêç G√©n√©ration du client Python..." -ForegroundColor Cyan
        Write-Host "Commande √† ex√©cuter:" -ForegroundColor Yellow
        Write-Host "npx @openapitools/openapi-generator-cli generate -i $specFile -g python -o ./generated/python" -ForegroundColor White
        
        $confirm = Read-Host "Ex√©cuter maintenant? (y/N)"
        if ($confirm -eq 'y' -or $confirm -eq 'Y') {
            try {
                npx @openapitools/openapi-generator-cli generate -i $specFile -g python -o ./generated/python
                Write-Host "‚úÖ Client Python g√©n√©r√© dans ./generated/python" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå Erreur: Assurez-vous que Node.js et npm sont install√©s" -ForegroundColor Red
            }
        }
    }
    
    "4" {
        Write-Host "`n‚úÖ Validation en ligne de la sp√©cification..." -ForegroundColor Cyan
        Write-Host "Outils de validation recommand√©s:" -ForegroundColor Yellow
        Write-Host "1. Swagger Editor: https://editor.swagger.io/" -ForegroundColor White
        Write-Host "2. OpenAPI Validator: https://apitools.dev/swagger-parser/online/" -ForegroundColor White
        Write-Host "3. Redoc Preview: https://redocly.github.io/redoc/" -ForegroundColor White
        
        try {
            Start-Process "https://editor.swagger.io/"
            Write-Host "‚úÖ Swagger Editor ouvert pour validation" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Ouvrez manuellement les liens ci-dessus" -ForegroundColor Yellow
        }
    }
    
    "5" {
        Write-Host "`nüìã URLs pour int√©gration:" -ForegroundColor Cyan
        $baseUrl = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1"
        Write-Host "Base URL API: $baseUrl" -ForegroundColor White
        Write-Host "Swagger Editor: https://editor.swagger.io/" -ForegroundColor White
        Write-Host "Fichier sp√©cification: $specFile" -ForegroundColor White
        
        # Copier l'URL de base dans le presse-papier si possible
        try {
            $baseUrl | Set-Clipboard
            Write-Host "‚úÖ URL de base copi√©e dans le presse-papier" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Copiez manuellement l'URL de base" -ForegroundColor Yellow
        }
    }
    
    "6" {
        Write-Host "`nüåê Test de connectivit√© endpoint /test..." -ForegroundColor Cyan
        $testUrl = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1/test"
        Write-Host "URL de test: $testUrl" -ForegroundColor White
        
        try {
            $response = Invoke-RestMethod -Uri $testUrl -Method GET -TimeoutSec 10
            Write-Host "‚úÖ Endpoint /test accessible!" -ForegroundColor Green
            Write-Host "R√©ponse: $($response | ConvertTo-Json -Depth 2)" -ForegroundColor Gray
        } catch {
            Write-Host "‚ùå Erreur de connectivit√©: $($_.Exception.Message)" -ForegroundColor Red
            Write-Host "‚ö†Ô∏è  V√©rifiez que le backend est en ligne" -ForegroundColor Yellow
        }
    }
    
    "7" {
        Write-Host "`nüìÑ R√©sum√© complet de la sp√©cification..." -ForegroundColor Cyan
        
        # Ex√©cuter le script de validation
        if (Test-Path "validate-openapi.ps1") {
            & .\validate-openapi.ps1
        } else {
            Write-Host "‚ö†Ô∏è  Script validate-openapi.ps1 non trouv√©" -ForegroundColor Yellow
        }
        
        Write-Host "`nüìã Fichiers disponibles:" -ForegroundColor Cyan
        Get-ChildItem "specs/*.yaml" | ForEach-Object {
            $info = Get-Item $_.FullName
            Write-Host "  - $($_.Name): $([math]::Round($info.Length / 1KB, 2)) KB" -ForegroundColor White
        }
        
        Write-Host "`nüìñ Documentation disponible:" -ForegroundColor Cyan
        Get-ChildItem "DOCS/*.md" | ForEach-Object {
            Write-Host "  - $($_.Name)" -ForegroundColor White
        }
    }
    
    "0" {
        Write-Host "`nüëã Au revoir!" -ForegroundColor Green
        exit 0
    }
    
    default {
        Write-Host "`n‚ùå Choix invalide. Relancez le script." -ForegroundColor Red
    }
}

Write-Host "`nüéâ Op√©ration termin√©e!" -ForegroundColor Cyan
Write-Host "üìö Pour plus d'aide, consultez specs/README.md" -ForegroundColor Yellow
Write-Host "üîó Documentation compl√®te: DOCS/" -ForegroundColor Yellow 