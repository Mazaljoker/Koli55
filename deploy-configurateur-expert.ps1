# Script de d√©ploiement de l'Assistant Configurateur Expert AlloKoli
# Utilise la fonction Edge /assistants existante pour cr√©er l'assistant sur Vapi

Write-Host "Deploiement de l'Assistant Configurateur Expert AlloKoli..." -ForegroundColor Green

# Configuration
$SUPABASE_URL = "https://aiurboizarbbcpynmmgv.supabase.co"
$SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFpdXJib2l6YXJiYmNweW5tbWd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDczOTUxNzUsImV4cCI6MjA2Mjk3MTE3NX0.5uZKJkSS656znzAd0VFLQ0vE3s2cEfpZfn5SCsFTBGM"

# Donn√©es de l'assistant configurateur expert
$assistantData = @{
    name = "AlloKoliConfig Pro - Assistant Configurateur Expert Omniscient"
    model = @{
        provider = "openai"
        model = "gpt-4o"
        temperature = 0.7
        maxTokens = 3000
        systemMessage = @"
Vous √™tes **AlloKoliConfig Pro**, l'assistant IA le plus avanc√© au monde pour la configuration d'agents vocaux Vapi.

üß† **Votre Expertise Omnisciente Unique:**
- **105 pages** de documentation Vapi officielle ma√Ætris√©es √† 100%
- **525 exemples** de configuration r√©els m√©moris√©s et analys√©s
- **168 sch√©mas** de donn√©es Vapi document√©s et optimis√©s
- **83 param√®tres** Vapi avanc√©s avec recommandations intelligentes
- **Tous les providers** vocaux, mod√®les LLM et transcribers disponibles
- **Base de connaissances live** mise √† jour avec les derni√®res fonctionnalit√©s Vapi

üéØ **Capacit√©s Avanc√©es Uniques:**
1. **Recommandations Intelligentes Sectorielles** : Je propose automatiquement les meilleurs providers selon votre activit√©
2. **Optimisation Performance Automatique** : Je calcule les param√®tres optimaux selon vos besoins
3. **Int√©grations Complexes Ma√Ætris√©es** : Je configure webhooks, tools personnalis√©s, squads multi-assistants
4. **Troubleshooting Expert Instantan√©** : Je diagnostique et corrige les probl√®mes en temps r√©el
5. **Architecture √âvolutive** : Je con√ßois des syst√®mes scalables pour croissance future

üöÄ **Modes de Configuration Adaptatifs:**
- **üü¢ SIMPLE** : Configuration guid√©e en 5 minutes (PME, artisans, commerces)
- **üü° AVANC√â** : Tools, int√©grations, webhooks (entreprises, services)  
- **üî¥ EXPERT** : Squads, SIP, custom transcribers, MCP (d√©veloppeurs, grandes entreprises)

Dites-moi votre niveau souhait√© ou d√©crivez directement votre besoin, je d√©tecterai automatiquement le niveau optimal !
"@
    }
    voice = @{
        provider = "elevenlabs"
        voiceId = "shimmer"
        stability = 0.5
        similarityBoost = 0.8
    }
    language = "fr-FR"
    firstMessage = "Bonjour ! Je suis AlloKoliConfig Pro, votre expert Vapi omniscient. Gr√¢ce √† ma ma√Ætrise compl√®te de 105 pages de documentation officielle et 525 exemples pratiques, je peux cr√©er des configurations depuis les plus simples jusqu'aux plus complexes (squads, webhooks, SIP, MCP). Quel est votre niveau souhait√© : SIMPLE pour une config guid√©e, AVANC√â pour tools et int√©grations, ou EXPERT pour configurations complexes ?"
    endCallMessage = "Parfait ! Votre assistant vocal expert est configur√© avec les meilleures pratiques Vapi. Vous recevrez tous les d√©tails par email. Merci d'avoir utilis√© AlloKoliConfig Pro !"
    
    # Outils MCP et fonctionnalit√©s avanc√©es
    tools = @(
        @{
            type = "function"
            function = @{
                name = "createAssistantWithIntelligentRecommendations"
                description = "Cr√©e l'assistant vocal final avec recommandations intelligentes bas√©es sur 105 pages de doc Vapi"
                parameters = @{
                    type = "object"
                    properties = @{
                        assistantName = @{ type = "string"; description = "Nom de l'assistant vocal" }
                        businessType = @{ type = "string"; description = "Type d'activit√© de l'entreprise" }
                        complexityLevel = @{ type = "string"; enum = @("simple", "advanced", "expert"); description = "Niveau de complexit√© souhait√©" }
                        assistantTone = @{ type = "string"; description = "Ton de communication" }
                        firstMessage = @{ type = "string"; description = "Message d'accueil" }
                        systemPromptCore = @{ type = "string"; description = "Prompt syst√®me principal" }
                        voiceProvider = @{ type = "string"; description = "Provider vocal recommand√©" }
                        voiceId = @{ type = "string"; description = "ID de la voix recommand√©e" }
                        modelProvider = @{ type = "string"; description = "Provider LLM recommand√©" }
                        modelName = @{ type = "string"; description = "Mod√®le LLM recommand√©" }
                        temperature = @{ type = "number"; description = "Temp√©rature optimale" }
                        enabledTools = @{ type = "array"; items = @{ type = "string" }; description = "Outils recommand√©s selon le secteur" }
                        advancedFeatures = @{ type = "object"; description = "Fonctionnalit√©s avanc√©es recommand√©es" }
                        companyName = @{ type = "string"; description = "Nom de l'entreprise" }
                        address = @{ type = "string"; description = "Adresse" }
                        phoneNumber = @{ type = "string"; description = "Num√©ro de t√©l√©phone" }
                        email = @{ type = "string"; description = "Email" }
                        openingHours = @{ type = "string"; description = "Horaires d'ouverture" }
                        endCallMessage = @{ type = "string"; description = "Message de fin d'appel" }
                    }
                    required = @("assistantName", "businessType", "complexityLevel", "assistantTone", "firstMessage", "systemPromptCore")
                }
            }
        },
        @{
            type = "function"
            function = @{
                name = "getVapiRecommendations"
                description = "Obtient des recommandations intelligentes bas√©es sur la base de connaissances Vapi"
                parameters = @{
                    type = "object"
                    properties = @{
                        businessType = @{ type = "string"; description = "Type d'activit√©" }
                        requirements = @{ type = "object"; description = "Exigences sp√©cifiques (langue, premium, etc.)" }
                    }
                    required = @("businessType")
                }
            }
        },
        @{
            type = "function"
            function = @{
                name = "explainVapiFeature"
                description = "Explique une fonctionnalit√© Vapi avec exemples de la documentation"
                parameters = @{
                    type = "object"
                    properties = @{
                        feature = @{ type = "string"; description = "Fonctionnalit√© √† expliquer (squads, webhooks, tools, etc.)" }
                    }
                    required = @("feature")
                }
            }
        }
    )
    
    # M√©tadonn√©es enrichies
    metadata = @{
        configurator_type = "expert_omniscient"
        knowledge_base_version = "2.0.0"
        total_pages_mastered = 105
        total_examples = 525
        total_schemas = 168
        coverage_score = 98
        intelligence_level = "omniscient"
        specializations = @("restaurant", "salon", "artisan", "liberal", "boutique", "pme", "enterprise")
        advanced_capabilities = @("intelligent_recommendations", "sector_optimization", "performance_tuning", "complex_integrations", "troubleshooting_expert", "scalable_architecture")
        supported_modes = @("simple", "advanced", "expert")
        creation_date = "2025-01-18"
        creator = "AlloKoli Team"
        version = "2.0.0"
    }
    
    # Configuration MCP
    server = @{
        url = "https://mcp.vapi.ai/mcp"
        timeoutSeconds = 30
    }
    
    # Fonctionnalit√©s avanc√©es
    voicemailDetection = @{
        enabled = $true
        voicemailDetectionTimeoutMs = 10000
    }
    
    silenceTimeoutSeconds = 30
    maxDurationSeconds = 1800
    backgroundSound = "office"
    backchannelingEnabled = $true
    backgroundDenoisingEnabled = $true
    modelOutputInMessagesEnabled = $true
    
    # Transcriber optimis√© pour le fran√ßais
    transcriber = @{
        provider = "deepgram"
        model = "nova-2"
        language = "fr"
        smartFormat = $true
        languageDetectionEnabled = $true
    }
}

# Conversion en JSON
$jsonData = $assistantData | ConvertTo-Json -Depth 10

Write-Host "Donnees de l'assistant preparees" -ForegroundColor Yellow
Write-Host "Taille des donnees: $($jsonData.Length) caracteres" -ForegroundColor Cyan

# Appel √† la fonction Edge /assistants
try {
    Write-Host "Appel de la fonction Edge /assistants..." -ForegroundColor Blue
    
    $response = Invoke-RestMethod -Uri "$SUPABASE_URL/functions/v1/assistants" `
        -Method POST `
        -Headers @{
            "Authorization" = "Bearer $SUPABASE_ANON_KEY"
            "Content-Type" = "application/json"
            "apikey" = $SUPABASE_ANON_KEY
        } `
        -Body $jsonData
    
    Write-Host "Assistant configurateur expert cree avec succes !" -ForegroundColor Green
    Write-Host "ID Assistant: $($response.data.id)" -ForegroundColor Cyan
    Write-Host "Nom: $($response.data.name)" -ForegroundColor Cyan
    Write-Host "Modele: $($response.data.model.provider)/$($response.data.model.model)" -ForegroundColor Cyan
    Write-Host "Voix: $($response.data.voice.provider)/$($response.data.voice.voiceId)" -ForegroundColor Cyan
    
    if ($response.data.vapi_assistant_id) {
        Write-Host "ID Vapi: $($response.data.vapi_assistant_id)" -ForegroundColor Green
        Write-Host "Assistant deploye sur Vapi avec succes !" -ForegroundColor Green
    }
    
    Write-Host "`nL'Assistant Configurateur Expert AlloKoli est maintenant operationnel !" -ForegroundColor Magenta
    Write-Host "Il maitrise 105 pages de documentation Vapi et 525 exemples" -ForegroundColor Yellow
    Write-Host "Pret a creer des configurations depuis simples jusqu'aux plus complexes !" -ForegroundColor Green
    
} catch {
    Write-Host "Erreur lors de la creation de l'assistant:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    
    if ($_.Exception.Response) {
        $errorResponse = $_.Exception.Response.GetResponseStream()
        $reader = New-Object System.IO.StreamReader($errorResponse)
        $errorBody = $reader.ReadToEnd()
        Write-Host "Details de l'erreur: $errorBody" -ForegroundColor Yellow
    }
}

Write-Host "`nScript termine." -ForegroundColor White 