#!/usr/bin/env pwsh

# Cr√©ation Assistant Configurateur AlloKoli via Vapi API
# =====================================================

Write-Host "üéØ Cr√©ation Assistant Configurateur AlloKoli" -ForegroundColor Green
Write-Host "=" * 50

# Configuration
$VapiApiUrl = "https://api.vapi.ai/assistant"

# R√©cup√©ration de la cl√© depuis l'environnement ou demande manuelle
$VapiApiKey = $env:VAPI_PRIVATE_KEY
if (-not $VapiApiKey) {
    Write-Host "‚ö†Ô∏è VAPI_PRIVATE_KEY non trouv√©e dans l'environnement" -ForegroundColor Yellow
    $VapiApiKey = Read-Host "Entrez votre cl√© API Vapi"
}

if (-not $VapiApiKey) {
    Write-Host "‚ùå Cl√© API Vapi requise" -ForegroundColor Red
    exit 1
}

# Configuration de l'assistant
$AssistantConfig = @{
    name = "Configurateur AlloKoli MCP"
    firstMessage = "Bonjour ! Je suis votre configurateur d'assistant vocal AlloKoli. D√©crivez-moi votre activit√© et je cr√©erai un assistant parfaitement adapt√© √† vos besoins professionnels !"
    systemMessage = @"
Tu es un expert en configuration d'assistants vocaux pour professionnels avec AlloKoli.

Ton r√¥le :
1. Analyser l'activit√© du client (restaurant, salon, artisan, cabinet m√©dical, commerce)
2. Recommander les meilleures voix selon le secteur d'activit√©
3. Cr√©er un assistant vocal personnalis√© et professionnel

Process √©tape par √©tape :
1. Demande une description d√©taill√©e de l'activit√© du client
2. Utilise analyzeBusinessContext pour d√©tecter automatiquement le secteur
3. Utilise listVoicesForBusiness pour recommander 3 voix optimis√©es
4. Recueille les pr√©f√©rences (nom entreprise, contact, message d'accueil personnalis√©)
5. Utilise createAssistant pour finaliser la cr√©ation avec la configuration optimale

Tu es enthousiaste, expert et efficace. Tu guides le client √©tape par √©tape vers un assistant vocal professionnel.
"@
    voice = @{
        provider = "azure"
        voiceId = "fr-FR-DeniseNeural"
    }
    model = @{
        provider = "openai"
        model = "gpt-4o-mini"
        temperature = 0.7
        maxTokens = 1000
    }
    tools = @(
        @{
            type = "function"
            function = @{
                name = "analyzeBusinessContext"
                description = "Analyse le contexte business et d√©tecte automatiquement le secteur d'activit√©"
                parameters = @{
                    type = "object"
                    properties = @{
                        businessDescription = @{
                            type = "string"
                            description = "Description d√©taill√©e de l'activit√© du client"
                        }
                    }
                    required = @("businessDescription")
                }
            }
            server = @{
                url = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1/configurator-tools?tool=analyzeBusinessContext"
                method = "POST"
            }
        },
        @{
            type = "function"
            function = @{
                name = "listVoicesForBusiness"
                description = "Liste les meilleures voix optimis√©es selon le secteur d'activit√©"
                parameters = @{
                    type = "object"
                    properties = @{
                        sector = @{
                            type = "string"
                            description = "Secteur d'activit√© d√©tect√©"
                        }
                    }
                    required = @("sector")
                }
            }
            server = @{
                url = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1/configurator-tools?tool=listVoicesForBusiness"
                method = "POST"
            }
        },
        @{
            type = "function"
            function = @{
                name = "createAssistant"
                description = "Cr√©e un assistant Vapi personnalis√© avec la configuration optimale"
                parameters = @{
                    type = "object"
                    properties = @{
                        name = @{
                            type = "string"
                            description = "Nom de l'entreprise"
                        }
                        sector = @{
                            type = "string"
                            description = "Secteur d'activit√©"
                        }
                        voice = @{
                            type = "object"
                            properties = @{
                                provider = @{ type = "string" }
                                voiceId = @{ type = "string" }
                            }
                            required = @("provider", "voiceId")
                        }
                    }
                    required = @("name", "sector", "voice")
                }
            }
            server = @{
                url = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1/configurator-tools?tool=createAssistant"
                method = "POST"
            }
        }
    )
    transcriber = @{
        provider = "deepgram"
        model = "nova-2"
        language = "fr"
    }
    recordingEnabled = $true
    silenceTimeoutSeconds = 30
    maxDurationSeconds = 900
    endCallMessage = "Merci d'avoir utilis√© le configurateur AlloKoli ! Votre assistant vocal sera op√©rationnel sous peu. √Ä bient√¥t !"
}

try {
    Write-Host "üîÑ Cr√©ation de l'assistant configurateur..." -ForegroundColor Cyan

    # Conversion en JSON
    $JsonPayload = $AssistantConfig | ConvertTo-Json -Depth 10

    Write-Host "üìã Payload pr√©par√©:" -ForegroundColor White
    $JsonPayload | Out-Host

    # Headers
    $Headers = @{
        "Authorization" = "Bearer $VapiApiKey"
        "Content-Type" = "application/json"
    }

    # Appel API
    Write-Host "üöÄ Appel API Vapi..." -ForegroundColor Cyan
    $Response = Invoke-RestMethod -Uri $VapiApiUrl -Method POST -Headers $Headers -Body $JsonPayload

    Write-Host "‚úÖ Assistant cr√©√© avec succ√®s !" -ForegroundColor Green
    Write-Host "üìã D√©tails:" -ForegroundColor White
    Write-Host "   ID: $($Response.id)" -ForegroundColor Yellow
    Write-Host "   Nom: $($Response.name)" -ForegroundColor Yellow
    Write-Host "   URL: https://vapi.ai/assistants/$($Response.id)" -ForegroundColor Yellow

    # Sauvegarde de la configuration
    $ConfigFile = "assistant-configurateur-created.json"
    $Response | ConvertTo-Json -Depth 10 | Out-File $ConfigFile -Encoding UTF8
    Write-Host "üíæ Configuration sauvegard√©e: $ConfigFile" -ForegroundColor Green

    Write-Host ""
    Write-Host "üéâ MISSION ACCOMPLIE !" -ForegroundColor Green
    Write-Host "üéØ Assistant configurateur AlloKoli op√©rationnel" -ForegroundColor Green
    Write-Host "üìû Testez avec l'ID: $($Response.id)" -ForegroundColor Yellow

} catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    
    if ($_.Exception.Response) {
        $StatusCode = $_.Exception.Response.StatusCode
        Write-Host "   Status Code: $StatusCode" -ForegroundColor Red
        
        try {
            $ErrorStream = $_.Exception.Response.GetResponseStream()
            $Reader = New-Object System.IO.StreamReader($ErrorStream)
            $ErrorBody = $Reader.ReadToEnd()
            Write-Host "   D√©tails: $ErrorBody" -ForegroundColor Red
        } catch {
            Write-Host "   Impossible de lire les d√©tails de l'erreur" -ForegroundColor Red
        }
    }
} 