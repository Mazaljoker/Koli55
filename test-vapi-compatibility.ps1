# Script de Test de Compatibilit√© Vapi.ai
# Teste la compatibilit√© de nos Edge Functions avec l'API Vapi officielle

Write-Host "üîç Test de Compatibilit√© Vapi.ai - AlloKoli" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# Configuration
$functionName = "test-vapi-compatibility"
$outputFile = "vapi-compatibility-report.json"

try {
    # 1. V√©rification des pr√©requis
    Write-Host "üìã V√©rification des pr√©requis..." -ForegroundColor Yellow
    
    # V√©rifier si Supabase CLI est install√©
    $supabaseCmd = Get-Command supabase -ErrorAction SilentlyContinue
    if (-not $supabaseCmd) {
        Write-Host "‚ùå Supabase CLI n'est pas install√© ou pas dans le PATH" -ForegroundColor Red
        Write-Host "üí° Installez avec: npm install -g supabase" -ForegroundColor Cyan
        exit 1
    }
    
    Write-Host "‚úÖ Supabase CLI d√©tect√©: $($supabaseCmd.Version)" -ForegroundColor Green
    
    # 2. D√©ploiement de la fonction de test
    Write-Host "üöÄ D√©ploiement de la fonction de test..." -ForegroundColor Yellow
    
    $deployResult = supabase functions deploy $functionName 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erreur lors du d√©ploiement:" -ForegroundColor Red
        Write-Host $deployResult -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Fonction d√©ploy√©e avec succ√®s" -ForegroundColor Green
    
    # 3. Attendre que la fonction soit disponible
    Write-Host "‚è≥ Attente de la disponibilit√© (5 secondes)..." -ForegroundColor Yellow
    Start-Sleep -Seconds 5
    
    # 4. R√©cup√©ration de l'URL du projet Supabase
    Write-Host "üîó R√©cup√©ration de la configuration Supabase..." -ForegroundColor Yellow
    
    # Essayer de lire le fichier de configuration
    $configFile = ".\.supabase\config.toml"
    $projectUrl = $null
    
    if (Test-Path $configFile) {
        $configContent = Get-Content $configFile -Raw
        if ($configContent -match 'project_id\s*=\s*"([^"]+)"') {
            $projectId = $matches[1]
            $projectUrl = "https://$projectId.supabase.co"
            Write-Host "‚úÖ URL du projet: $projectUrl" -ForegroundColor Green
        }
    }
    
    if (-not $projectUrl) {
        Write-Host "‚ö†Ô∏è  Impossible de d√©tecter l'URL automatiquement" -ForegroundColor Yellow
        $projectUrl = Read-Host "Entrez l'URL de votre projet Supabase (ex: https://xyz.supabase.co)"
    }
    
    # 5. R√©cup√©ration de la cl√© ANON
    $anonKey = $env:SUPABASE_ANON_KEY
    if (-not $anonKey) {
        Write-Host "‚ö†Ô∏è  Variable SUPABASE_ANON_KEY non trouv√©e" -ForegroundColor Yellow
        $anonKey = Read-Host "Entrez votre cl√© ANON Supabase"
    }
    
    # 6. Ex√©cution du test de compatibilit√©
    Write-Host "üß™ Ex√©cution des tests de compatibilit√©..." -ForegroundColor Yellow
    
    $testUrl = "$projectUrl/functions/v1/$functionName"
    $headers = @{
        'Authorization' = "Bearer $anonKey"
        'Content-Type' = 'application/json'
    }
    
    Write-Host "üì° URL de test: $testUrl" -ForegroundColor Cyan
    
    try {
        $response = Invoke-RestMethod -Uri $testUrl -Method POST -Headers $headers -TimeoutSec 30
        
        # 7. Sauvegarde du rapport
        $response | ConvertTo-Json -Depth 10 | Out-File -FilePath $outputFile -Encoding UTF8
        Write-Host "‚úÖ Rapport sauvegard√©: $outputFile" -ForegroundColor Green
        
        # 8. Affichage des r√©sultats
        Write-Host "`nüìä R√âSULTATS DU TEST DE COMPATIBILIT√â" -ForegroundColor Green
        Write-Host "=====================================" -ForegroundColor Green
        
        Write-Host "‚è∞ Timestamp: $($response.timestamp)" -ForegroundColor Cyan
        Write-Host "üéØ Statut Global: $($response.overall_status.ToUpper())" -ForegroundColor $(
            switch ($response.overall_status) {
                'compatible' { 'Green' }
                'issues_found' { 'Yellow' }
                'error' { 'Red' }
                default { 'White' }
            }
        )
        Write-Host "üìà Tests: $($response.tests_passed)/$($response.tests_run) r√©ussis" -ForegroundColor Cyan
        
        # Affichage des probl√®mes s'il y en a
        if ($response.issues -and $response.issues.Count -gt 0) {
            Write-Host "`n‚ö†Ô∏è  PROBL√àMES D√âTECT√âS:" -ForegroundColor Yellow
            foreach ($issue in $response.issues) {
                $color = if ($issue.status -eq 'error') { 'Red' } else { 'Yellow' }
                Write-Host "  ‚Ä¢ $($issue.test): $($issue.message)" -ForegroundColor $color
            }
        } else {
            Write-Host "`n‚úÖ Aucun probl√®me d√©tect√©!" -ForegroundColor Green
        }
        
        # Affichage des recommandations
        if ($response.recommendations -and $response.recommendations.Count -gt 0) {
            Write-Host "`nüí° RECOMMANDATIONS:" -ForegroundColor Cyan
            foreach ($rec in $response.recommendations) {
                Write-Host "  ‚Ä¢ $rec" -ForegroundColor White
            }
        }
        
        # 9. R√©sum√© final
        Write-Host "`nüéâ CONCLUSION:" -ForegroundColor Green
        switch ($response.overall_status) {
            'compatible' {
                Write-Host "‚úÖ Votre backend est 100% compatible avec Vapi.ai!" -ForegroundColor Green
                Write-Host "üöÄ Pr√™t pour la production!" -ForegroundColor Green
            }
            'issues_found' {
                Write-Host "‚ö†Ô∏è  Probl√®mes mineurs d√©tect√©s mais fonctionnel" -ForegroundColor Yellow
                Write-Host "üîß Voir les recommandations ci-dessus" -ForegroundColor Yellow
            }
            'error' {
                Write-Host "‚ùå Probl√®mes critiques d√©tect√©s" -ForegroundColor Red
                Write-Host "üõ†Ô∏è  Corrections n√©cessaires avant production" -ForegroundColor Red
            }
        }
        
    } catch {
        Write-Host "‚ùå Erreur lors de l'ex√©cution du test:" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
        
        # Suggestions de d√©bogage
        Write-Host "`nüîß D√âBOGAGE:" -ForegroundColor Yellow
        Write-Host "1. V√©rifiez que la fonction est bien d√©ploy√©e:" -ForegroundColor White
        Write-Host "   supabase functions list" -ForegroundColor Cyan
        Write-Host "2. V√©rifiez les logs de la fonction:" -ForegroundColor White
        Write-Host "   supabase functions logs $functionName" -ForegroundColor Cyan
        Write-Host "3. V√©rifiez votre configuration Supabase:" -ForegroundColor White
        Write-Host "   supabase status" -ForegroundColor Cyan
        
        exit 1
    }
    
} catch {
    Write-Host "‚ùå Erreur g√©n√©rale:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
}

Write-Host "`nüéØ Test de compatibilit√© termin√©!" -ForegroundColor Green
Write-Host "üìÑ Rapport d√©taill√© disponible dans: $outputFile" -ForegroundColor Cyan 