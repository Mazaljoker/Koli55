#!/usr/bin/env pwsh

# Script de d√©ploiement des edge functions configurateur
# Deploy Configurateur Expert.ps1

Write-Host "üöÄ D√©ploiement Edge Functions Configurateur" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Yellow

# Configuration du projet KOLI
$SUPABASE_PROJECT_ID = "aiurboizarbbcpynmmgv"

Write-Host "‚úÖ Projet cible : KOLI ($SUPABASE_PROJECT_ID)" -ForegroundColor Green

# V√©rifier que Supabase CLI est install√©
try {
    $supabaseVersion = supabase --version
    Write-Host "‚úÖ Supabase CLI d√©tect√© : $supabaseVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Supabase CLI non trouv√©. Installez-le avec :" -ForegroundColor Red
    Write-Host "npm install -g supabase" -ForegroundColor Yellow
    exit 1
}

# D√©ploiement des 3 edge functions configurateur
Write-Host "`nüì¶ D√©ploiement des functions..." -ForegroundColor Yellow

$functions = @(
    "configurator-tools/analyze-business",
    "configurator-tools/list-voices", 
    "configurator-tools/create-assistant"
)

foreach ($func in $functions) {
    Write-Host "`nüîß D√©ploiement $func..." -ForegroundColor Cyan
    
    try {
        $deployOutput = supabase functions deploy $func --project-ref $SUPABASE_PROJECT_ID 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $func d√©ploy√© avec succ√®s" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Erreur d√©ploiement $func :" -ForegroundColor Red
            Write-Host $deployOutput -ForegroundColor Red
        }
        
    } catch {
        Write-Host "‚ùå Exception d√©ploiement $func : $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test de validation apr√®s d√©ploiement
Write-Host "`nüß™ Tests de validation..." -ForegroundColor Yellow

$SUPABASE_URL = "https://aiurboizarbbcpynmmgv.supabase.co"
$SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFpdXJib2l6YXJiYmNweW5tbWd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTU4NTk3NzYsImV4cCI6MjAzMTQzNTc3Nn0.JH0x8O1KnfDl5lsZFSBJ0TlkA3pFQ8aNSDT8VOMBh1o"

$headers = @{
    "Authorization" = "Bearer $SUPABASE_ANON_KEY"
    "Content-Type" = "application/json"
}

# Test rapide de la fonction analyze-business
Start-Sleep -Seconds 5  # Attendre le d√©ploiement

try {
    $testPayload = @{ description = "Restaurant italien √† Paris" } | ConvertTo-Json
    $testResponse = Invoke-RestMethod -Uri "$SUPABASE_URL/functions/v1/configurator-tools/analyze-business" -Method POST -Headers $headers -Body $testPayload
    
    Write-Host "‚úÖ Test analyze-business : Secteur d√©tect√© = $($testResponse.analysis.sector)" -ForegroundColor Green
    
} catch {
    Write-Host "‚ö†Ô∏è  Test analyze-business √©chou√© (normal si d√©ploiement en cours)" -ForegroundColor Yellow
    Write-Host "   Erreur : $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host "`nüéâ D√©ploiement termin√© !" -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Yellow
Write-Host "‚úÖ Edge Functions configurateur d√©ploy√©es" -ForegroundColor White
Write-Host "‚úÖ Projet : KOLI ($SUPABASE_PROJECT_ID)" -ForegroundColor White
Write-Host "‚úÖ Pr√™t pour tests complets" -ForegroundColor White

Write-Host "`nüìù Prochaines √©tapes :" -ForegroundColor Cyan
Write-Host "1. Attendre 2-3 minutes (propagation)" -ForegroundColor White
Write-Host "2. Tester : pwsh -File create-via-mcp-supabase.ps1" -ForegroundColor White
Write-Host "3. Cr√©er l'assistant configurateur avec tools" -ForegroundColor White

# D√©ploiement final avec test des deux cl√©s Vapi
# ==============================================

Write-Host "üîë Test des cl√©s Vapi et cr√©ation du configurateur" -ForegroundColor Green
Write-Host "=" * 60

$VapiApiUrl = "https://api.vapi.ai/assistant"

# D'apr√®s votre image Supabase, voici les cl√©s (compl√©tez-les si n√©cessaire)
Write-Host "üìã Cl√©s depuis votre configuration Supabase :" -ForegroundColor Cyan
Write-Host "   VAPI_PRIVATE_KEY: 71c8d36796cf..." -ForegroundColor White
Write-Host "   VAPI_PUBLIC_KEY:  02e5b2503a3c..." -ForegroundColor White

Write-Host "`nüîç Entrez vos cl√©s COMPL√àTES pour test :" -ForegroundColor Yellow

$PrivateKey = Read-Host "VAPI_PRIVATE_KEY (cl√© compl√®te)"
$PublicKey = Read-Host "VAPI_PUBLIC_KEY (cl√© compl√®te)"

# Configuration de l'assistant
$ConfiguratorPayload = @{
    name = "üéØ Configurateur AlloKoli Expert"
    voice = @{
        provider = "azure"
        voiceId = "fr-FR-DeniseNeural"
    }
    model = @{
        provider = "openai"
        model = "gpt-4o-mini"
        temperature = 0.7
        systemMessage = @"
Tu es un expert configurateur d'assistants vocaux AlloKoli.

üéØ TON R√îLE :
- Analyser l'activit√© du client (restaurant, salon, artisan, commerce)
- Recommander les meilleures voix selon le secteur
- Cr√©er un assistant vocal personnalis√©

üìã PROCESSUS :
1. Demande description d√©taill√©e de l'activit√©
2. Utilise analyzeBusinessContext pour d√©tecter le secteur
3. Utilise listVoicesForBusiness pour recommander voix
4. Utilise createAssistant pour cr√©er l'assistant final

Tu guides le client √©tape par √©tape vers un assistant vocal professionnel !
"@
    }
    firstMessage = "Bonjour ! üéØ Je suis votre configurateur AlloKoli. D√©crivez-moi votre activit√© et je cr√©erai un assistant vocal parfait pour vous !"
    transcriber = @{
        provider = "deepgram"
        model = "nova-2"
        language = "fr"
    }
    tools = @(
        @{
            type = "function"
            function = @{
                name = "analyzeBusinessContext"
                description = "Analyse le contexte business automatiquement"
                parameters = @{
                    type = "object"
                    properties = @{
                        businessDescription = @{
                            type = "string"
                            description = "Description de l'activit√©"
                        }
                    }
                    required = @("businessDescription")
                }
            }
            server = @{
                url = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1/configurator-tools?tool=analyzeBusinessContext"
                method = "POST"
            }
        },
        @{
            type = "function"
            function = @{
                name = "listVoicesForBusiness"
                description = "Liste les voix optimales par secteur"
                parameters = @{
                    type = "object"
                    properties = @{
                        sector = @{
                            type = "string"
                            description = "Secteur d'activit√©"
                        }
                    }
                    required = @("sector")
                }
            }
            server = @{
                url = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1/configurator-tools?tool=listVoicesForBusiness"
                method = "POST"
            }
        },
        @{
            type = "function"
            function = @{
                name = "createAssistant"
                description = "Cr√©e l'assistant vocal final"
                parameters = @{
                    type = "object"
                    properties = @{
                        name = @{ type = "string" }
                        sector = @{ type = "string" }
                        voice = @{
                            type = "object"
                            properties = @{
                                provider = @{ type = "string" }
                                voiceId = @{ type = "string" }
                            }
                        }
                    }
                    required = @("name", "sector", "voice")
                }
            }
            server = @{
                url = "https://aiurboizarbbcpynmmgv.supabase.co/functions/v1/configurator-tools?tool=createAssistant"
                method = "POST"
            }
        }
    )
} | ConvertTo-Json -Depth 10

# Test 1: PRIVATE_KEY
if ($PrivateKey) {
    try {
        Write-Host "`nüß™ Test avec PRIVATE_KEY..." -ForegroundColor Cyan
        
        $Headers = @{
            "Authorization" = "Bearer $PrivateKey"
            "Content-Type" = "application/json"
        }

        $Response = Invoke-RestMethod -Uri $VapiApiUrl -Method POST -Headers $Headers -Body $ConfiguratorPayload
        
        Write-Host "‚úÖ SUCC√àS avec PRIVATE_KEY !" -ForegroundColor Green
        Write-Host "üéâ CONFIGURATEUR CR√â√â !" -ForegroundColor Green
        Write-Host "   üÜî ID: $($Response.id)" -ForegroundColor Yellow
        Write-Host "   üìû Test: https://dashboard.vapi.ai/assistant/$($Response.id)/test" -ForegroundColor Cyan
        
        # Sauvegarder le succ√®s
        @{
            success = $true
            key_used = "PRIVATE_KEY"
            assistant_id = $Response.id
            test_url = "https://dashboard.vapi.ai/assistant/$($Response.id)/test"
            created_at = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        } | ConvertTo-Json | Out-File "SUCCESS-PRIVATE-KEY.json" -Encoding UTF8
        
        Write-Host "`nüéØ MISSION ACCOMPLIE avec PRIVATE_KEY ! üéâ" -ForegroundColor Green
        return
        
    } catch {
        Write-Host "‚ùå PRIVATE_KEY √©choue: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 2: PUBLIC_KEY si PRIVATE √©choue
if ($PublicKey) {
    try {
        Write-Host "`nüß™ Test avec PUBLIC_KEY..." -ForegroundColor Cyan
        
        $Headers = @{
            "Authorization" = "Bearer $PublicKey"
            "Content-Type" = "application/json"
        }

        $Response = Invoke-RestMethod -Uri $VapiApiUrl -Method POST -Headers $Headers -Body $ConfiguratorPayload
        
        Write-Host "‚úÖ SUCC√àS avec PUBLIC_KEY !" -ForegroundColor Green
        Write-Host "üéâ CONFIGURATEUR CR√â√â !" -ForegroundColor Green
        Write-Host "   üÜî ID: $($Response.id)" -ForegroundColor Yellow
        Write-Host "   üìû Test: https://dashboard.vapi.ai/assistant/$($Response.id)/test" -ForegroundColor Cyan
        
        # Sauvegarder le succ√®s
        @{
            success = $true
            key_used = "PUBLIC_KEY"
            assistant_id = $Response.id
            test_url = "https://dashboard.vapi.ai/assistant/$($Response.id)/test"
            created_at = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        } | ConvertTo-Json | Out-File "SUCCESS-PUBLIC-KEY.json" -Encoding UTF8
        
        Write-Host "`nüéØ MISSION ACCOMPLIE avec PUBLIC_KEY ! üéâ" -ForegroundColor Green
        return
        
    } catch {
        Write-Host "‚ùå PUBLIC_KEY √©choue aussi: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`nüí° Solutions possibles :" -ForegroundColor Yellow
Write-Host "1. V√©rifiez que vos cl√©s sont compl√®tes (pas tronqu√©es)" -ForegroundColor White
Write-Host "2. R√©cup√©rez les cl√©s depuis https://dashboard.vapi.ai" -ForegroundColor White
Write-Host "3. Essayez de r√©g√©n√©rer les cl√©s si n√©cessaire" -ForegroundColor White 