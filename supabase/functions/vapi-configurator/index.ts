// @ts-nocheck - Ignorer les erreurs TypeScript pour l'environnement Deno
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";
import { corsHeaders } from "../shared/cors.ts";
import {
  createErrorResponse,
  createSuccessResponse,
} from "../shared/response-helpers.ts";

// Import du client MCP officiel
import { Client } from "https://esm.sh/@modelcontextprotocol/sdk@1.0.0/client/index.js";
import { StreamableHTTPClientTransport } from "https://esm.sh/@modelcontextprotocol/sdk@1.0.0/client/streamableHttp.js";

// Chargement de la base de connaissances Vapi compl√®te
let vapiKnowledgeBase: any = null;

/**
 * Charge la base de connaissances Vapi compl√®te depuis le fichier JSON
 */
async function loadVapiKnowledgeBase() {
  if (vapiKnowledgeBase) return vapiKnowledgeBase;

  try {
    // En production, charger depuis le syst√®me de fichiers local
    const knowledgeBasePath =
      "/opt/render/project/src/DOCS/vapi-knowledge-base-complete.json";

    // Fallback pour d√©veloppement local
    let kbData;
    try {
      kbData = await Deno.readTextFile(knowledgeBasePath);
    } catch {
      // Fallback vers le chemin relatif
      kbData = await Deno.readTextFile(
        "./DOCS/vapi-knowledge-base-complete.json"
      );
    }

    vapiKnowledgeBase = JSON.parse(kbData);
    console.log(
      `[KNOWLEDGE_BASE] Loaded ${vapiKnowledgeBase.metadata.total_pages} pages, ${vapiKnowledgeBase.metadata.statistics.total_examples} examples`
    );

    return vapiKnowledgeBase;
  } catch (error) {
    console.error(
      "[KNOWLEDGE_BASE_ERROR] Failed to load Vapi knowledge base:",
      error
    );
    return null;
  }
}

/**
 * Extrait les recommandations intelligentes bas√©es sur la base de connaissances
 */
function getIntelligentRecommendations(
  businessType: string,
  requirements: any = {}
) {
  const kb = vapiKnowledgeBase;
  if (!kb) return null;

  const recommendations = {
    voice: getVoiceRecommendation(businessType, requirements),
    model: getModelRecommendation(businessType, requirements),
    transcriber: getTranscriberRecommendation(requirements),
    tools: getToolsRecommendation(businessType),
    advanced: getAdvancedFeatures(businessType),
  };

  return recommendations;
}

function getVoiceRecommendation(businessType: string, req: any) {
  // Bas√© sur la documentation scrap√©e des providers vocaux
  if (businessType === "restaurant" && req.language === "fr") {
    return {
      provider: "azure",
      voiceId: "fr-FR-DeniseNeural",
      reason: "Voix fran√ßaise naturelle, id√©ale pour restaurants",
      alternatives: [
        {
          provider: "elevenlabs",
          voiceId: "shimmer",
          reason: "Premium quality",
        },
        {
          provider: "openai",
          voiceId: "alloy",
          reason: "√âquilibre co√ªt/qualit√©",
        },
      ],
    };
  }

  if (req.premium && req.naturalness === "high") {
    return {
      provider: "elevenlabs",
      voiceId: "shimmer",
      reason: "Qualit√© premium pour exp√©rience haut de gamme",
      alternatives: [
        { provider: "cartesia", voiceId: "sonic", reason: "Faible latence" },
        { provider: "playht", voiceId: "jennifer", reason: "Voix naturelle" },
      ],
    };
  }

  return {
    provider: "openai",
    voiceId: "alloy",
    reason: "√âquilibre qualit√©/co√ªt optimal",
    alternatives: [
      {
        provider: "azure",
        voiceId: "fr-FR-DeniseNeural",
        reason: "Fran√ßais natif",
      },
      { provider: "deepgram", voiceId: "aura", reason: "Tr√®s rapide" },
    ],
  };
}

function getModelRecommendation(businessType: string, req: any) {
  // Bas√© sur les 168 sch√©mas document√©s
  if (businessType === "restaurant" || businessType === "salon") {
    return {
      provider: "openai",
      model: "gpt-4o",
      temperature: 0.7,
      reason: "Optimal pour interactions client naturelles",
      systemPromptTemplate: "conversational_service",
    };
  }

  if (businessType === "artisan" || req.urgency === "high") {
    return {
      provider: "openai",
      model: "gpt-4o-mini",
      temperature: 0.3,
      reason: "R√©ponses rapides et pr√©cises pour urgences",
      systemPromptTemplate: "efficient_direct",
    };
  }

  return {
    provider: "openai",
    model: "gpt-4o",
    temperature: 0.5,
    reason: "Polyvalent et fiable",
    systemPromptTemplate: "professional_balanced",
  };
}

function getTranscriberRecommendation(req: any) {
  if (req.language === "fr" || req.multilingual) {
    return {
      provider: "deepgram",
      model: "nova-2",
      language: "fr",
      reason: "Excellent pour le fran√ßais avec smart formatting",
    };
  }

  return {
    provider: "deepgram",
    model: "nova-2",
    reason: "Meilleur rapport qualit√©/vitesse/prix",
  };
}

function getToolsRecommendation(businessType: string) {
  const tools = [];

  if (businessType === "restaurant") {
    tools.push(
      { type: "google.calendar.event.create", reason: "Prise de r√©servations" },
      { type: "transferCall", reason: "Transfert vers cuisine/manager" }
    );
  }

  if (businessType === "salon") {
    tools.push(
      {
        type: "google.calendar.availability.check",
        reason: "V√©rification disponibilit√©s",
      },
      { type: "google.calendar.event.create", reason: "Prise de rendez-vous" }
    );
  }

  if (businessType === "artisan") {
    tools.push(
      { type: "transferCall", reason: "Transfert urgences" },
      { type: "sms", reason: "Confirmation interventions" }
    );
  }

  return tools;
}

function getAdvancedFeatures(businessType: string) {
  const features = [];

  // Bas√© sur les 525 exemples de la documentation
  features.push({
    name: "voicemailDetection",
    enabled: true,
    reason: "D√©tection automatique r√©pondeur",
  });

  features.push({
    name: "backgroundMessages",
    enabled: true,
    reason: "Messages contextuels pendant les pauses",
  });

  if (businessType === "restaurant" || businessType === "salon") {
    features.push({
      name: "callAnalysis",
      enabled: true,
      reason: "Analyse satisfaction client",
    });
  }

  return features;
}

// Configuration enrichie de l'agent Vapi Configurateur
const ENHANCED_CONFIGURATOR_CONFIG = {
  name: "AlloKoliConfig Pro",
  description:
    "Assistant IA expert omniscient en configuration d'agents vocaux Vapi - Ma√Ætrise 105 pages de documentation",
  version: "2.0.0",

  prompts: {
    expert: `Vous √™tes **AlloKoliConfig Pro**, l'assistant IA le plus avanc√© pour la configuration d'agents vocaux Vapi. 

**üß† Votre Expertise Omnisciente:**
- **105 pages** de documentation Vapi ma√Ætris√©es
- **525 exemples** de configuration m√©moris√©s  
- **168 sch√©mas** de donn√©es connus
- **83 param√®tres** Vapi document√©s
- Tous les providers vocaux, mod√®les et outils disponibles

**üéØ Capacit√©s Avanc√©es:**
1. **Recommandations Intelligentes** : Je propose automatiquement les meilleurs providers selon votre usage
2. **Optimisation Performance** : Je sugg√®re les param√®tres optimaux (temp√©rature, tokens, latence)
3. **Int√©grations Complexes** : Je configure webhooks, tools personnalis√©s, squads multi-assistants
4. **Troubleshooting Expert** : Je diagnostique et corrige les probl√®mes de configuration

**üöÄ Modes de Configuration:**
- **üü¢ SIMPLE** : Configuration guid√©e en 5 minutes (PME, artisans)
- **üü° AVANC√â** : Tools, int√©grations, webhooks (entreprises)
- **üî¥ EXPERT** : Squads, SIP, custom transcribers (d√©veloppeurs)

**üìã Processus Intelligent:**
1. **Analyse du besoin** (simple ‚Üí expert)
2. **Recommandations bas√©es sur 105 pages de doc Vapi**
3. **Configuration progressive avec explications**
4. **Tests et optimisations automatiques**
5. **D√©ploiement avec monitoring**

Dites-moi votre niveau souhait√© :
- "**simple**" pour une config guid√©e classique
- "**avanc√©**" pour tools et int√©grations  
- "**expert**" pour configurations complexes (squads, webhooks, SIP)

Ou d√©crivez directement votre besoin et je d√©tecterai automatiquement le niveau optimal !`,

    restaurant: `Vous √™tes **AlloKoliConfig**, un assistant IA expert en configuration d'agents vocaux personnalis√©s pour les restaurants. Votre mission est d'aider le restaurateur, de mani√®re conversationnelle et didactique, √† d√©finir tous les param√®tres n√©cessaires pour cr√©er son propre assistant vocal intelligent en moins de 5 minutes.

### [Style de Communication]
- **Ton** : Accueillant, professionnel, patient, et tr√®s p√©dagogue. Sp√©cifiquement pour les restaurants, vous pouvez utiliser un ton l√©g√®rement plus chaleureux et gourmand si appropri√©
- **Langage** : Simple, clair, √©vitez le jargon technique
- **Conversation** : Naturelle, posez une question √† la fois
- **Objectif** : Rendre le processus facile et agr√©able, m√™me pour un restaurateur tr√®s occup√©

### [Processus de Collecte Sp√©cialis√© Restaurant]

#### 1. Introduction et Nom de l'Assistant
Accueillez l'utilisateur et expliquez bri√®vement votre r√¥le. Demandez quel nom il souhaite donner √† son futur assistant vocal.
**Exemple** : "Bonjour! Je suis AlloKoliConfig. Ensemble, nous allons cr√©er un assistant vocal parfait pour votre restaurant. Quel nom aimeriez-vous lui donner? Par exemple, 'Assistant [Nom Restaurant]' ou 'Service R√©servation'?"

#### 2. Type d'Activit√© (Confirm√©)
Confirmez que c'est bien pour un restaurant (Cible: businessType = "restaurant")
**Exemple** : "Juste pour confirmer, cet assistant est bien pour votre restaurant, n'est-ce pas?"

#### 3. Ton de l'Assistant
**Exemple** : "Quel style de conversation votre assistant devrait-il avoir? Plut√¥t classique et formel, ou convivial et chaleureux comme l'ambiance de votre restaurant?"

#### 4. Message d'Accueil
**Exemple** : "Quand un client appelle, comment votre assistant devrait-il r√©pondre? Par exemple : 'Restaurant [Votre Nom], bonjour! Comment puis-je vous aider?'"

#### 5. Objectif Principal et Informations Cl√©s
Pour un restaurant, ce sera souvent :
- Prise de r√©servations
- R√©pondre aux questions sur les horaires d'ouverture
- Donner l'adresse
- Questions sur le type de cuisine ou sp√©cialit√©s

**Exemple** : "Quelles sont les t√¢ches essentielles de votre assistant? Doit-il principalement prendre les r√©servations? Ou aussi r√©pondre aux questions sur vos horaires, votre adresse, et peut-√™tre le type de cuisine que vous proposez?"

#### 6. Fonctionnalit√©s Sp√©cifiques Restaurant

##### Prise de R√©servations
**Exemple** : "Souhaitez-vous que l'assistant puisse prendre les r√©servations de table?"
Si oui : "Quelles informations doit-il demander pour une r√©servation? Typiquement : nom, nombre de personnes, date, heure, et num√©ro de t√©l√©phone. Y a-t-il autre chose?"

##### Questions sur le Menu
**Exemple** : "Vos clients posent-ils souvent des questions sur des plats sp√©cifiques, des options v√©g√©tariennes, ou des allerg√®nes? Si oui, quelles informations g√©n√©rales l'assistant pourrait-il donner?"

##### Commandes √† Emporter/Livraison
**Exemple** : "G√©rez-vous les commandes √† emporter ou la livraison? L'assistant doit-il en parler ou prendre des informations pr√©liminaires?"

##### Transfert d'appel
**Exemple** : "Si un client a une demande tr√®s sp√©cifique ou s'il y a un probl√®me, l'assistant doit-il transf√©rer l'appel? Si oui, √† quel num√©ro?"

#### 7. Message de Fin d'Appel
**Exemple** : "Comment votre assistant devrait-il conclure l'appel? Par exemple : 'Merci pour votre r√©servation! Au plaisir de vous accueillir.' ou 'Merci de votre appel, √† bient√¥t chez [nom restaurant].'"

#### 8. R√©capitulatif et Confirmation Finale
R√©capitulez TOUTES les informations cl√©s collect√©es et demandez une confirmation explicite √† l'utilisateur.

### [R√®gles de Conduite]
- **Clart√© avant tout** : Assurez-vous que vos questions sont sans ambigu√Øt√©
- **Confirmation** : Apr√®s avoir collect√© quelques informations cl√©s, r√©capitulez et demandez confirmation
- **Gestion d'erreurs** : Si l'utilisateur donne une r√©ponse floue, demandez poliment de pr√©ciser
- **Guidage** : N'h√©sitez pas √† donner des exemples concrets pour illustrer ce que vous attendez comme r√©ponse

### [Appel d'Outil MCP]
- **Condition de D√©clenchement** : UNIQUEMENT apr√®s confirmation explicite du r√©capitulatif final
- **Nom de l'outil** : createAssistantAndProvisionNumber
- **Param√®tres √† transmettre** : assistantName, businessType, assistantTone, firstMessage, systemPromptCore, canTakeReservations, reservationDetails, canTransferCall, transferPhoneNumber, keyInformation, endCallMessage, language

Commencez par : "Bonjour! Je suis AlloKoliConfig. Ensemble, nous allons cr√©er un assistant vocal parfait pour votre restaurant. Quel nom aimeriez-vous lui donner? Par exemple, 'Assistant [Nom Restaurant]' ou 'Service R√©servation'?"`,

    salon: `Vous √™tes **AlloKoliConfig**, sp√©cialis√© pour les salons de coiffure et instituts de beaut√©.

**Sp√©cificit√©s Salon:**
- Prise de rendez-vous (nom, t√©l√©phone, service souhait√©, pr√©f√©rence horaire)
- Informations sur les services et tarifs de base
- Questions sur les coiffeurs/esth√©ticiennes disponibles
- Politique d'annulation/modification
- Produits vendus

**Ton adapt√©:** √âl√©gant et rassurant.

Commencez par : "Bonjour! Je suis l√† pour vous aider √† cr√©er l'assistant vocal id√©al pour votre salon."`,

    artisan: `Vous √™tes **AlloKoliConfig**, sp√©cialis√© pour les artisans du b√¢timent (plombiers, √©lectriciens, etc.).

**Sp√©cificit√©s Artisan:**
- Qualification d'urgence vs devis
- Prise de coordonn√©es (nom, adresse intervention, t√©l√©phone)
- Zones d'intervention
- Tarifs de base (horaire, d√©placement)
- Proc√©dure urgences

**Ton adapt√©:** Direct, efficace, rassurant pour les urgences.

Commencez par : "Bonjour, je suis AlloKoliConfig. Je vais vous aider √† configurer un assistant vocal pour g√©rer vos appels, m√™me quand vous √™tes sur un chantier."`,

    liberal: `Vous √™tes **AlloKoliConfig**, sp√©cialis√© pour les professions lib√©rales (avocats, consultants, coachs).

**Sp√©cificit√©s Profession Lib√©rale:**
- Filtrage et qualification des appels
- Prise de rendez-vous consultation/s√©ance
- Informations sur domaines d'expertise
- Collecte d'informations pr√©liminaires
- Gestion des urgences

**Ton adapt√©:** Professionnel, discret, organis√©.

Commencez par : "Bonjour, je suis AlloKoliConfig. Je vais vous aider √† mettre en place un assistant vocal pour mieux g√©rer vos contacts et rendez-vous."`,

    boutique: `Vous √™tes **AlloKoliConfig**, sp√©cialis√© pour les boutiques et commerces de d√©tail.

**Sp√©cificit√©s Boutique:**
- Horaires d'ouverture et adresse
- Disponibilit√© de types de produits
- Click & collect / r√©servation d'articles
- Promotions et nouveaut√©s
- Politique retours/√©changes

**Ton adapt√©:** Accueillant, serviable, enthousiaste.

Commencez par : "Bonjour! Je suis AlloKoliConfig. Cr√©ons ensemble un assistant vocal pour votre boutique qui impressionnera vos clients!"`,

    pme: `Vous √™tes **AlloKoliConfig**, version polyvalente pour PME g√©n√©ralistes.

**Sp√©cificit√©s PME:**
- Horaires et adresse
- Description des principaux services/produits
- Prise de messages
- Redirection d'appels simple
- FAQ de base

**Ton adapt√©:** Professionnel, clair, efficace et adaptable.

Commencez par : "Bonjour! Je suis AlloKoliConfig. Ensemble, nous allons cr√©er un assistant vocal pour aider votre entreprise √† mieux r√©pondre √† vos clients."`,

    general: `Vous √™tes **AlloKoliConfig Pro**, un assistant IA expert en configuration d'agents vocaux personnalis√©s pour les Petites et Moyennes Entreprises (PME) et les artisans. 

**üß† Expertise Enrichie:**
Gr√¢ce √† ma base de connaissances de 105 pages de documentation Vapi officielle, je ma√Ætrise tous les aspects :
- Tous les providers vocaux (ElevenLabs, Azure, OpenAI, Cartesia, etc.)
- Tous les mod√®les LLM (GPT-4o, Claude, Gemini, etc.)  
- Tous les transcribers (Deepgram, Google, Assembly AI, etc.)
- 525 exemples de configuration r√©els
- Int√©grations avanc√©es (Google Calendar, Sheets, Slack, etc.)

**üéØ Mission:**
Vous aider √† cr√©er votre assistant vocal intelligent parfait en moins de 5 minutes, avec des recommandations optimales bas√©es sur votre secteur d'activit√©.

**üí° Recommandations Intelligentes:**
Je vous proposerai automatiquement :
- La meilleure voix pour votre secteur
- Le mod√®le LLM optimal selon vos besoins
- Les outils adapt√©s √† votre activit√©
- Les param√®tres de performance optimaux

Commencez par me dire quel nom vous souhaitez donner √† votre assistant vocal, et je vous guiderai avec mes recommandations expertes !`,
  },
};

// Initialisation du client Supabase
const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Configuration Vapi
const vapiApiKey = Deno.env.get("VAPI_API_KEY");

/**
 * D√©termine le prompt appropri√© selon le type d'activit√©
 */
function getPromptForBusinessType(businessType: string): string {
  const type = businessType.toLowerCase();

  if (
    type.includes("restaurant") ||
    type.includes("pizzeria") ||
    type.includes("caf√©")
  ) {
    return ENHANCED_CONFIGURATOR_CONFIG.prompts.restaurant;
  }
  if (
    type.includes("salon") ||
    type.includes("coiffure") ||
    type.includes("beaut√©") ||
    type.includes("esth√©tique")
  ) {
    return ENHANCED_CONFIGURATOR_CONFIG.prompts.salon;
  }
  if (
    type.includes("plombier") ||
    type.includes("√©lectricien") ||
    type.includes("artisan") ||
    type.includes("chauffagiste")
  ) {
    return ENHANCED_CONFIGURATOR_CONFIG.prompts.artisan;
  }
  if (
    type.includes("avocat") ||
    type.includes("consultant") ||
    type.includes("coach") ||
    type.includes("th√©rapeute")
  ) {
    return ENHANCED_CONFIGURATOR_CONFIG.prompts.liberal;
  }
  if (
    type.includes("boutique") ||
    type.includes("commerce") ||
    type.includes("magasin") ||
    type.includes("vente")
  ) {
    return ENHANCED_CONFIGURATOR_CONFIG.prompts.boutique;
  }

  return ENHANCED_CONFIGURATOR_CONFIG.prompts.pme;
}

/**
 * Cr√©e l'assistant configurateur expert sur Vapi avec base de connaissances
 */
async function createVapiConfiguratorExpert(
  businessType?: string,
  mode: "simple" | "advanced" | "expert" = "simple"
): Promise<{ id: string; success: boolean }> {
  if (!vapiApiKey) {
    throw new Error("VAPI_API_KEY non configur√©e");
  }

  // Charger la base de connaissances
  await loadVapiKnowledgeBase();

  // S√©lectionner le prompt selon le mode
  let systemPrompt;
  if (mode === "expert") {
    systemPrompt = ENHANCED_CONFIGURATOR_CONFIG.prompts.expert;
  } else {
    systemPrompt = businessType
      ? getPromptForBusinessType(businessType)
      : ENHANCED_CONFIGURATOR_CONFIG.prompts.general;
  }

  // Obtenir les recommandations intelligentes
  const recommendations = getIntelligentRecommendations(
    businessType || "general",
    { mode }
  );

  const vapiPayload = {
    name: `AlloKoliConfig Pro - Assistant Configurateur ${mode.toUpperCase()}`,
    model: {
      provider: "openai",
      model: "gpt-4o",
      temperature: 0.7,
      maxTokens: 2000, // Augment√© pour les r√©ponses expertes
      systemMessage: systemPrompt,
    },
    voice: recommendations?.voice
      ? {
          provider: recommendations.voice.provider,
          voiceId: recommendations.voice.voiceId,
          stability: 0.5,
          similarityBoost: 0.8,
        }
      : {
          provider: "11labs",
          voiceId: "21m00Tcm4TlvDq8ikWAM",
          stability: 0.5,
          similarityBoost: 0.8,
        },
    firstMessage:
      mode === "expert"
        ? "Bonjour ! Je suis AlloKoliConfig Pro, votre expert Vapi omniscient. Gr√¢ce √† ma ma√Ætrise de 105 pages de documentation et 525 exemples, je peux cr√©er des configurations depuis les plus simples jusqu'aux plus complexes (squads, webhooks, SIP). Quel est votre niveau souhait√© : simple, avanc√©, ou expert ?"
        : "Bonjour ! Je suis AlloKoliConfig Pro, enrichi d'une base de connaissances compl√®te Vapi. Je vais vous cr√©er l'assistant vocal parfait avec des recommandations intelligentes bas√©es sur 105 pages de documentation officielle. Quel nom souhaitez-vous donner √† votre assistant ?",

    endCallMessage:
      "Parfait ! Votre assistant vocal expert est configur√© avec les meilleures pratiques Vapi. Vous recevrez tous les d√©tails par email. Merci d'avoir utilis√© AlloKoli Pro !",

    language: "fr-FR",

    // Configuration MCP pour utiliser le serveur officiel Vapi
    server: {
      url: "https://mcp.vapi.ai/mcp",
      timeoutSeconds: 30,
    },

    // M√©tadonn√©es enrichies
    metadata: {
      configurator_type: "expert",
      mode: mode,
      knowledge_base_version: vapiKnowledgeBase?.metadata?.version || "2.0.0",
      total_pages_mastered: vapiKnowledgeBase?.metadata?.total_pages || 105,
      total_examples:
        vapiKnowledgeBase?.metadata?.statistics?.total_examples || 525,
      business_type: businessType,
      recommendations: recommendations,
    },

    // Outils MCP enrichis avec la base de connaissances
    tools: {
      functions: [
        {
          name: "createAssistantWithIntelligentRecommendations",
          description:
            "Cr√©e l'assistant vocal final avec recommandations intelligentes bas√©es sur 105 pages de doc Vapi",
          parameters: {
            type: "object",
            properties: {
              assistantName: {
                type: "string",
                description: "Nom de l'assistant vocal",
              },
              businessType: {
                type: "string",
                description: "Type d'activit√© de l'entreprise",
              },
              complexityLevel: {
                type: "string",
                enum: ["simple", "advanced", "expert"],
                description: "Niveau de complexit√© souhait√©",
              },
              assistantTone: {
                type: "string",
                description: "Ton de communication",
              },
              firstMessage: {
                type: "string",
                description: "Message d'accueil",
              },
              systemPromptCore: {
                type: "string",
                description: "Prompt syst√®me principal",
              },

              // Recommandations intelligentes
              voiceProvider: {
                type: "string",
                description: "Provider vocal recommand√©",
              },
              voiceId: {
                type: "string",
                description: "ID de la voix recommand√©e",
              },
              modelProvider: {
                type: "string",
                description: "Provider LLM recommand√©",
              },
              modelName: {
                type: "string",
                description: "Mod√®le LLM recommand√©",
              },
              temperature: {
                type: "number",
                description: "Temp√©rature optimale",
              },

              // Fonctionnalit√©s avanc√©es
              enabledTools: {
                type: "array",
                items: { type: "string" },
                description: "Outils recommand√©s selon le secteur",
              },
              advancedFeatures: {
                type: "object",
                description: "Fonctionnalit√©s avanc√©es recommand√©es",
              },

              // Informations entreprise
              companyName: {
                type: "string",
                description: "Nom de l'entreprise",
              },
              address: { type: "string", description: "Adresse" },
              phoneNumber: {
                type: "string",
                description: "Num√©ro de t√©l√©phone",
              },
              email: { type: "string", description: "Email" },
              openingHours: {
                type: "string",
                description: "Horaires d'ouverture",
              },
              endCallMessage: {
                type: "string",
                description: "Message de fin d'appel",
              },
            },
            required: [
              "assistantName",
              "businessType",
              "complexityLevel",
              "assistantTone",
              "firstMessage",
              "systemPromptCore",
            ],
          },
        },
        {
          name: "getVapiRecommendations",
          description:
            "Obtient des recommandations intelligentes bas√©es sur la base de connaissances Vapi",
          parameters: {
            type: "object",
            properties: {
              businessType: { type: "string", description: "Type d'activit√©" },
              requirements: {
                type: "object",
                description: "Exigences sp√©cifiques (langue, premium, etc.)",
              },
            },
            required: ["businessType"],
          },
        },
        {
          name: "explainVapiFeature",
          description:
            "Explique une fonctionnalit√© Vapi avec exemples de la documentation",
          parameters: {
            type: "object",
            properties: {
              feature: {
                type: "string",
                description:
                  "Fonctionnalit√© √† expliquer (squads, webhooks, tools, etc.)",
              },
            },
            required: ["feature"],
          },
        },
      ],
    },
  };

  const response = await fetch("https://api.vapi.ai/assistant", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(vapiPayload),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur cr√©ation assistant Vapi Expert: ${error}`);
  }

  const vapiAssistant = await response.json();
  return { id: vapiAssistant.id, success: true };
}

/**
 * Utilise le serveur MCP officiel Vapi pour cr√©er un assistant
 */
async function createAssistantViaMCP(params: any): Promise<any> {
  if (!vapiApiKey) {
    throw new Error("VAPI_API_KEY non configur√©e");
  }

  // Initialiser le client MCP officiel
  const mcpClient = new Client({
    name: "allokoli-configurator",
    version: "1.0.0",
  });

  const transport = new StreamableHTTPClientTransport(
    new URL("https://mcp.vapi.ai/mcp"),
    {
      requestInit: {
        headers: {
          Authorization: `Bearer ${vapiApiKey}`,
        },
      },
    }
  );

  try {
    await mcpClient.connect(transport);

    // Cr√©er l'assistant via le serveur MCP officiel
    const assistantResponse = await mcpClient.callTool({
      name: "create_assistant",
      arguments: {
        name: params.assistantName,
        model: {
          provider: "openai",
          model: "gpt-4",
          temperature: 0.7,
          maxTokens: 1000,
          systemMessage: generateSystemPrompt(params),
        },
        voice: {
          provider: "11labs",
          voiceId: "21m00Tcm4TlvDq8ikWAM",
          stability: 0.5,
          similarityBoost: 0.8,
        },
        firstMessage: params.firstMessage,
        endCallMessage:
          params.endCallMessage || "Merci pour votre appel. Au revoir !",
        language: "fr-FR",
      },
    });

    // Optionnel : Provisionner un num√©ro de t√©l√©phone
    let phoneNumber = null;
    if (params.provisionPhoneNumber) {
      const phoneResponse = await mcpClient.callTool({
        name: "list_phone_numbers",
        arguments: {},
      });

      // Utiliser le premier num√©ro disponible ou en cr√©er un nouveau
      const phoneNumbers = parseToolResponse(phoneResponse);
      if (phoneNumbers && phoneNumbers.length > 0) {
        phoneNumber = phoneNumbers[0];
      }
    }

    return {
      assistant: parseToolResponse(assistantResponse),
      phoneNumber: phoneNumber,
    };
  } finally {
    await mcpClient.close();
  }
}

/**
 * Parse la r√©ponse des outils MCP
 */
function parseToolResponse(response: any): any {
  if (!response?.content) return response;
  const textItem = response.content.find((item: any) => item.type === "text");
  if (textItem?.text) {
    try {
      return JSON.parse(textItem.text);
    } catch {
      return textItem.text;
    }
  }
  return response;
}

/**
 * G√©n√®re le prompt syst√®me bas√© sur les param√®tres collect√©s
 */
function generateSystemPrompt(params: any): string {
  const basePrompt = `Vous √™tes ${
    params.assistantName
  }, un assistant vocal intelligent pour ${params.businessType}.

Ton de communication : ${params.assistantTone}

Informations sur l'entreprise :
${params.companyName ? `- Nom : ${params.companyName}` : ""}
${params.address ? `- Adresse : ${params.address}` : ""}
${params.phoneNumber ? `- T√©l√©phone : ${params.phoneNumber}` : ""}
${params.email ? `- Email : ${params.email}` : ""}
${params.openingHours ? `- Horaires : ${params.openingHours}` : ""}

Fonctionnalit√©s :
${params.canTakeReservations ? "- Prise de r√©servations activ√©e" : ""}
${params.canTakeAppointments ? "- Prise de rendez-vous activ√©e" : ""}
${params.canTransferCall ? "- Transfert d'appels activ√©" : ""}

Instructions sp√©cifiques :
${params.systemPromptCore}

Soyez toujours professionnel, aidant et repr√©sentez bien l'entreprise.`;

  return basePrompt;
}

/**
 * Sauvegarde l'assistant configurateur en base
 */
async function saveConfiguratorToDatabase(
  vapiId: string,
  businessType?: string
): Promise<string> {
  const { data, error } = await supabase
    .from("assistants")
    .insert({
      name: "AlloKoliConfig - Assistant Configurateur",
      vapi_assistant_id: vapiId,
      business_type: businessType || "configurator",
      system_prompt: getPromptForBusinessType(businessType || "general"),
      first_message:
        "Bonjour ! Je suis AlloKoliConfig, votre guide pour cr√©er votre assistant vocal personnalis√©.",
      is_active: true,
      is_configurator: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    })
    .select("id")
    .single();

  if (error) {
    throw new Error(`Erreur sauvegarde en base: ${error.message}`);
  }

  return data.id;
}

/**
 * Handler principal
 */
async function handler(req: Request): Promise<Response> {
  // Gestion CORS
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { action, businessType, assistantParams } = await req.json();

    switch (action) {
      case "create":
        // Cr√©er l'assistant configurateur sur Vapi
        const vapiResult = await createVapiConfiguratorExpert(businessType);

        // Sauvegarder en base de donn√©es
        const assistantId = await saveConfiguratorToDatabase(
          vapiResult.id,
          businessType
        );

        return createSuccessResponse({
          assistantId,
          vapiId: vapiResult.id,
          message: "Assistant configurateur cr√©√© avec succ√®s",
          prompt: getPromptForBusinessType(businessType || "general"),
        });

      case "create-assistant-mcp":
        // Utiliser le serveur MCP officiel pour cr√©er l'assistant final
        const mcpResult = await createAssistantViaMCP(assistantParams);

        return createSuccessResponse({
          assistant: mcpResult.assistant,
          phoneNumber: mcpResult.phoneNumber,
          message: "Assistant cr√©√© via MCP officiel Vapi",
        });

      case "get-prompt":
        // Retourner le prompt appropri√© selon le type d'activit√©
        return createSuccessResponse({
          prompt: getPromptForBusinessType(businessType || "general"),
          businessType: businessType || "general",
        });

      case "list-prompts":
        // Lister tous les prompts disponibles
        return createSuccessResponse({
          prompts: Object.keys(ENHANCED_CONFIGURATOR_CONFIG.prompts),
          descriptions: {
            general: "Prompt g√©n√©raliste pour tous types d'entreprises",
            restaurant: "Sp√©cialis√© pour restaurants, pizzerias, caf√©s",
            salon: "Sp√©cialis√© pour salons de coiffure et instituts de beaut√©",
            artisan: "Sp√©cialis√© pour artisans du b√¢timent",
            liberal: "Sp√©cialis√© pour professions lib√©rales",
            boutique: "Sp√©cialis√© pour boutiques et commerces",
            pme: "G√©n√©raliste pour PME diverses",
          },
        });

      default:
        return createErrorResponse("Action non reconnue", 400);
    }
  } catch (error) {
    console.error("Erreur dans vapi-configurator:", error);
    return createErrorResponse(error.message, 500);
  }
}

// Export pour Deno
Deno.serve(handler);
